// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DOCTOR
  HOSPITAL
  PATIENT
}

enum Status {
  pending
  verified
  not_verified
}

enum AuthType {
  WALLET
  EMAIL_PASSWORD
}

model Admin {
  id            String   @id @default(uuid())
  walletAddress String?  @unique  // Nullable to support email login
  email         String?   @unique
  password      String   // Hashed password for security
  name          String
  authType      AuthType @default(EMAIL_PASSWORD) // Supports both login methods
  createdAt     DateTime @default(now())
}

// Doctor table for storing verified doctors
model Doctor {
  id             String   @id // Foreign key from User table
  user           User     @relation(fields: [id], references: [id])
  walletAddress  String   @unique
  name           String
  specialization String
  details        String?
  licenseNumber  String
  verified       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Hospital table for storing verified hospitals
model Hospital {
  id             String   @id // Foreign key from User table
  user           User     @relation(fields: [id], references: [id])
  walletAddress  String   @unique
  name           String
  address        String
  registrationId String
  details        String?
  verified       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Patient table for storing patient information
model Patient {
  id                  String               @id // Foreign key from User table
  user                User                 @relation(fields: [id], references: [id])
  walletAddress       String?              @unique
  name                String
  premiumSubscription PremiumSubscription?
  details             String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

// Verification request table for admin verification of doctors and hospitals
model VerificationRequest {
  id            String  @id @default(uuid())
  userId        String  @unique // Foreign key referencing the User table
  user          User    @relation(fields: [userId], references: [id])
  walletAddress String  @unique
  role          Role    @default(PATIENT)
  details       String? // Additional details from the verification form
  status        Status  @default(pending)

  // Doctor-specific fields
  licenseNumber  String?
  specialization String?

  // Hospital-specific fields
  address        String?
  registrationId String?

  // Patient-specific fields
  name        String?
  premiumUser Boolean? @default(false)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  verifiedBy String? // Admin ID or name who verified the request
}

model User {
  id            String  @id @default(uuid())
  email         String? @unique
  password      String? // Hashed password for email login
  name          String?
  premium       Boolean @default(false)
  walletAddress String? @unique  // Nullable to allow email-only users
  role          Role    @default(PATIENT)
  status        Status  @default(pending)
  details       String? 

  authType      AuthType @default(WALLET) // Specifies login method

  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  doctor               Doctor?
  hospital             Hospital?
  patient              Patient?
  verificationRequests VerificationRequest[]

  @@index([role])
  @@index([status])
}

// Appointment table for managing doctor-patient appointments
model Appointment {
  id        String   @id @default(uuid())
  patientId String   @unique
  doctorId  String
  timeSlot  DateTime
  status    String // 'Pending', 'Confirmed'
}

// Premium subscription details
model PremiumSubscription {
  id               String   @id @default(uuid())
  patientId        String   @unique
  patient          Patient  @relation(fields: [patientId], references: [id])
  startDate        DateTime @default(now())
  endDate          DateTime
  subscriptionType String // 'monthly', 'yearly'
  features         String[] // Array of enabled features
  active           Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
